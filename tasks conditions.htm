<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head><script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app202.us.archive.org';v.server_ms=249;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="https://web-static.archive.org/_static/js/bundle-playback.js?v=t1Bf4PY_" charset="utf-8"></script>
<script type="text/javascript" src="https://web-static.archive.org/_static/js/wombat.js?v=txqj7nKC" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="https://web-static.archive.org/_static/js/ruffle/ruffle.js"></script>
<script type="text/javascript">
  __wm.init("https://web.archive.org/web");
  __wm.wombat("http://www.kgeorgiy.info:80/courses/paradigms/homeworks.html","20190627153522","https://web.archive.org/","web","https://web-static.archive.org/_static/",
	      "1561649722");
</script>
<link rel="stylesheet" type="text/css" href="https://web-static.archive.org/_static/css/banner-styles.css?v=S1zqJCYt" />
<link rel="stylesheet" type="text/css" href="https://web-static.archive.org/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Парадигмы программирования :: Домашние задания</title><link href="/web/20190627153522cs_/http://www.kgeorgiy.info/design/main.css" type="text/css" rel="stylesheet"><link rel="shortcut icon" href="/web/20190627153522im_/http://www.kgeorgiy.info/favicon.ico" type="image/x-icon"><link rel="icon" href="/web/20190627153522im_/http://www.kgeorgiy.info/favicon.ico" type="image/x-icon"><link href="/web/20190627153522cs_/http://www.kgeorgiy.info/plan.css" type="text/css" rel="stylesheet"><script type="text/javascript">var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-37693764-1"]);_gaq.push(["_setDomainName","kgeorgiy.info"]);_gaq.push(["_trackPageview"]);(function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src=("https:"==document.location.protocol?"https://web.archive.org/web/20190627153522/https://ssl":"https://web.archive.org/web/20190627153522/http://www")+".google-analytics.com/ga.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})();</script></head><body><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display:none;direction:ltr;">
<div id="wm-ipp" style="position:fixed;left:0;top:0;right:0;">
<div id="donato" style="position:relative;width:100%;">
  <div id="donato-base">
    <iframe id="donato-if" src="https://archive.org/includes/donate.php?as_page=1&amp;platform=wb&amp;referer=https%3A//web.archive.org/web/20190627153522/http%3A//www.kgeorgiy.info/courses/paradigms/homeworks.html"
	    scrolling="no" frameborder="0" style="width:100%; height:100%">
    </iframe>
  </div>
</div><div id="wm-ipp-inside">
  <div id="wm-toolbar" style="position:relative;display:flex;flex-flow:row nowrap;justify-content:space-between;">
    <div id="wm-logo" style="/*width:110px;*/padding-top:12px;">
      <a href="/web/" title="Wayback Machine home page"><img src="https://web-static.archive.org/_static/images/toolbar/wayback-toolbar-logo-200.png" srcset="https://web-static.archive.org/_static/images/toolbar/wayback-toolbar-logo-100.png, https://web-static.archive.org/_static/images/toolbar/wayback-toolbar-logo-150.png 1.5x, https://web-static.archive.org/_static/images/toolbar/wayback-toolbar-logo-200.png 2x" alt="Wayback Machine" style="width:100px" border="0" /></a>
    </div>
    <div class="c" style="display:flex;flex-flow:column nowrap;justify-content:space-between;flex:1;">
      <form class="u" style="display:flex;flex-direction:row;flex-wrap:nowrap;" target="_top" method="get" action="/web/submit" name="wmtb" id="wmtb"><input type="text" name="url" id="wmtbURL" value="http://www.kgeorgiy.info/courses/paradigms/homeworks.html" onfocus="this.focus();this.select();" style="flex:1;"/><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20190627153522" /><input type="submit" value="Go" />
      </form>
      <div style="display:flex;flex-flow:row nowrap;align-items:flex-end;">
                <div class="s" id="wm-nav-captures" style="flex:1;">
                    <a class="t" href="/web/20190627153522*/http://www.kgeorgiy.info/courses/paradigms/homeworks.html" title="See a list of every capture for this URL">61 captures</a>
          <div class="r" title="Timespan for captures of this URL">13 Feb 2017 - 08 Mar 2024</div>
          </div>
        <div class="k">
          <a href="" id="wm-graph-anchor">
            <div id="wm-ipp-sparkline" title="Explore captures for this URL" style="position: relative">
              <canvas id="wm-sparkline-canvas" width="725" height="27" border="0"></canvas>
            </div>
          </a>
        </div>
      </div>
    </div>
    <div class="n">
      <table>
        <tbody>
          <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
          <tr class="m">
            <td class="b" nowrap="nowrap"><a href="https://web.archive.org/web/20190527072439/http://kgeorgiy.info:80/courses/paradigms/homeworks.html" title="27 May 2019"><strong>May</strong></a></td>
            <td class="c" id="displayMonthEl" title="You are here: 15:35:22 Jun 27, 2019">JUN</td>
            <td class="f" nowrap="nowrap"><a href="https://web.archive.org/web/20190729015528/http://kgeorgiy.info:80/courses/paradigms/homeworks.html" title="29 Jul 2019"><strong>Jul</strong></a></td>
          </tr>
          <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
          <tr class="d">
            <td class="b" nowrap="nowrap"><a href="https://web.archive.org/web/20190607001106/http://www.kgeorgiy.info:80/courses/paradigms/homeworks.html" title="00:11:06 Jun 07, 2019"><img src="https://web-static.archive.org/_static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a></td>
            <td class="c" id="displayDayEl" style="width:34px;font-size:22px;white-space:nowrap;" title="You are here: 15:35:22 Jun 27, 2019">27</td>
            <td class="f" nowrap="nowrap"><a href="https://web.archive.org/web/20190729015528/http://kgeorgiy.info:80/courses/paradigms/homeworks.html" title="01:55:28 Jul 29, 2019"><img src="https://web-static.archive.org/_static/images/toolbar/wm_tb_nxt_on.png" alt="Next capture" width="14" height="16" border="0" /></a></td>
          </tr>
          <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
          <tr class="y">
            <td class="b" nowrap="nowrap"><a href="https://web.archive.org/web/20180617070415/http://www.kgeorgiy.info:80/courses/paradigms/homeworks.html" title="17 Jun 2018"><strong>2018</strong></a></td>
            <td class="c" id="displayYearEl" title="You are here: 15:35:22 Jun 27, 2019">2019</td>
            <td class="f" nowrap="nowrap"><a href="https://web.archive.org/web/20210817165209/http://www.kgeorgiy.info/courses/paradigms/homeworks.html" title="17 Aug 2021"><strong>2021</strong></a></td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="r" style="display:flex;flex-flow:column nowrap;align-items:flex-end;justify-content:space-between;">
      <div id="wm-btns" style="text-align:right;height:23px;">
                <span class="xxs">
          <div id="wm-save-snapshot-success">success</div>
          <div id="wm-save-snapshot-fail">fail</div>
          <a id="wm-save-snapshot-open" href="#" title="Share via My Web Archive" >
            <span class="iconochive-web"></span>
          </a>
          <a href="https://archive.org/account/login.php" title="Sign In" id="wm-sign-in">
            <span class="iconochive-person"></span>
          </a>
          <span id="wm-save-snapshot-in-progress" class="iconochive-web"></span>
        </span>
                <a class="xxs" href="http://faq.web.archive.org/" title="Get some help using the Wayback Machine" style="top:-6px;"><span class="iconochive-question" style="color:rgb(87,186,244);font-size:160%;"></span></a>
        <a id="wm-tb-close" href="#close" style="top:-2px;" title="Close the toolbar"><span class="iconochive-remove-circle" style="color:#888888;font-size:240%;"></span></a>
      </div>
      <div id="wm-share" class="xxs">
        <a href="/web/20190627153522/http://web.archive.org/screenshot/http://www.kgeorgiy.info/courses/paradigms/homeworks.html"
           id="wm-screenshot"
           title="screenshot">
          <span class="wm-icon-screen-shot"></span>
        </a>
        <a href="#" id="wm-video" title="video">
          <span class="iconochive-movies"></span>
        </a>
        <a id="wm-share-facebook" href="#" data-url="https://web.archive.org/web/20190627153522/http://www.kgeorgiy.info:80/courses/paradigms/homeworks.html" title="Share on Facebook" style="margin-right:5px;" target="_blank"><span class="iconochive-facebook" style="color:#3b5998;font-size:160%;"></span></a>
        <a id="wm-share-twitter" href="#" data-url="https://web.archive.org/web/20190627153522/http://www.kgeorgiy.info:80/courses/paradigms/homeworks.html" title="Share on Twitter" style="margin-right:5px;" target="_blank"><span class="iconochive-twitter" style="color:#1dcaff;font-size:160%;"></span></a>
      </div>
      <div style="padding-right:2px;text-align:right;white-space:nowrap;">
        <a id="wm-expand" class="wm-btn wm-closed" href="#expand" onclick="__wm.ex(event);return false;"><span id="wm-expand-icon" class="iconochive-down-solid"></span> <span class="xxs" style="font-size:80%;">About this capture</span></a>
      </div>
    </div>
  </div>
    <div id="wm-capinfo" style="border-top:1px solid #777;display:none; overflow: hidden">
        <div id="wm-capinfo-notice" source="api"></div>
                <div id="wm-capinfo-collected-by">
    <div style="background-color:#666;color:#fff;font-weight:bold;text-align:center">COLLECTED BY</div>
    <div style="padding:3px;position:relative" id="wm-collected-by-content">
            <div style="display:inline-block;vertical-align:top;width:50%;">
			<span class="c-logo" style="background-image:url(https://archive.org/services/img/alexacrawls);"></span>
		Organization: <a style="color:#33f;" href="https://archive.org/details/alexacrawls" target="_new"><span class="wm-title">Alexa Crawls</span></a>
		<div style="max-height:75px;overflow:hidden;position:relative;">
	  <div style="position:absolute;top:0;left:0;width:100%;height:75px;background:linear-gradient(to bottom,rgba(255,255,255,0) 0%,rgba(255,255,255,0) 90%,rgba(255,255,255,255) 100%);"></div>
	  Starting in 1996, <a href="http://www.alexa.com/">Alexa Internet</a> has been donating their crawl data to the Internet Archive.  Flowing in every day, these data are added to the <a href="http://web.archive.org/">Wayback Machine</a> after an embargo period.
	</div>
	      </div>
      <div style="display:inline-block;vertical-align:top;width:49%;">
			<span class="c-logo" style="background-image:url(https://archive.org/services/img/alexacrawls)"></span>
		<div>Collection: <a style="color:#33f;" href="https://archive.org/details/alexacrawls" target="_new"><span class="wm-title">Alexa Crawls</span></a></div>
		<div style="max-height:75px;overflow:hidden;position:relative;">
	  <div style="position:absolute;top:0;left:0;width:100%;height:75px;background:linear-gradient(to bottom,rgba(255,255,255,0) 0%,rgba(255,255,255,0) 90%,rgba(255,255,255,255) 100%);"></div>
	  Starting in 1996, <a href="http://www.alexa.com/">Alexa Internet</a> has been donating their crawl data to the Internet Archive.  Flowing in every day, these data are added to the <a href="http://web.archive.org/">Wayback Machine</a> after an embargo period.
	</div>
	      </div>
    </div>
    </div>
    <div id="wm-capinfo-timestamps">
    <div style="background-color:#666;color:#fff;font-weight:bold;text-align:center" title="Timestamps for the elements of this page">TIMESTAMPS</div>
    <div>
      <div id="wm-capresources" style="margin:0 5px 5px 5px;max-height:250px;overflow-y:scroll !important"></div>
      <div id="wm-capresources-loading" style="text-align:left;margin:0 20px 5px 5px;display:none"><img src="https://web-static.archive.org/_static/images/loading.gif" alt="loading" /></div>
    </div>
    </div>
  </div></div></div></div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20190627153522/http://www.kgeorgiy.info:80/courses/paradigms/homeworks.html</div>
<script type="text/javascript">//<![CDATA[
__wm.bt(725,27,25,2,"web","http://www.kgeorgiy.info/courses/paradigms/homeworks.html","20190627153522",1996,"https://web-static.archive.org/_static/",["https://web-static.archive.org/_static/css/banner-styles.css?v=S1zqJCYt","https://web-static.archive.org/_static/css/iconochive.css?v=qtvMKcIJ"], false);
  __wm.rw(1);
//]]></script>
<!-- END WAYBACK TOOLBAR INSERT -->
 <table id="header"><tr><td id="breadcrumbs"><a href="./../../">ГК</a> / <a href="./../">Материалы курсов</a> / <a href="./">Парадигмы программирования</a> / </td></tr><tr><td id="title">Домашние задания</td></tr></table><table id="body"><tr><td id="main"><h3 id="homework-1">Домашнее задание 1. Обработка ошибок</h3><ol><li>
            Добавьте в программу вычисляющую выражения обработку ошибок, в том числе:
            <ul><li>ошибки разбора выражений;</li><li>ошибки вычисления выражений.</li></ul></li><li>
            Для выражения <code>1000000*x*x*x*x*x/(x-1)</code> вывод программы
            должен иметь следующий вид:
            <pre>
x       f
0       0
1       division by zero
2       32000000
3       121500000
4       341333333
5       overflow
6       overflow
7       overflow
8       overflow
9       overflow
10      overflow
            </pre>
            Результат <code>division by zero</code> (<code>overflow</code>) означает,
            что в процессе вычисления произошло деление на ноль (переполнение).
        </li><li>
            При выполнении задания следует обратить внимание на дизайн и обработку исключений.
        </li><li>
            Человеко-читаемые сообщения об ошибках должны выводится на консоль.
        </li><li>
            Программа не должна &laquo;вылетать&raquo; с исключениями (как стандартными, так и добавленными).
        </li></ol><p><a href="https://web.archive.org/web/20190627153522/https://www.kgeorgiy.info/git/geo/paradigms-2019">Тесты к домашним заданиям</a></p><h3 id="homework-2">Домашнее задание 2. Markdown to HTML</h3><ol><li>
            Разработайте конвертер из
            <a href="https://web.archive.org/web/20190627153522/https://ru.wikipedia.org/wiki/Markdown">Markdown</a>-разметки
            в <a href="https://web.archive.org/web/20190627153522/https://ru.wikipedia.org/wiki/HTML">HTML</a>.
        </li><li>
            Конвертер должен поддерживать следующие возможности:
            <ol><li>
                    Абзацы текста разделяются пустыми строками.
                </li><li>
                    Элементы строчной разметки:
                    выделение (<tt>*</tt> или <tt>_</tt>),
                    сильное выделение (<tt>**</tt> или <tt>__</tt>),
                    зачеркивание (<tt>--</tt>),
                    код (<tt>`</tt>)
                </li><li>
                    Заголовки (<tt>#</tt> * уровень заголовка)
                </li></ol></li><li>
            Конвертер должен называться <tt>Md2Html</tt> и
            принимать два аргумента: название входного файла
            с Markdown-разметкой и название выходного файла
            c HTML-разметкой. Оба файла должны иметь кодировку UTF-8.
        </li><li>
            Пример
          <ul><li>
              Входной файл
            <pre>
# Заголовок первого уровня

## Второго

### Третьего ## уровня

#### Четвертого
# Все еще четвертого

Этот абзац текста,
содержит две строки.

    # Может показаться, что это заголовок.
Но нет, это абзац начинающийся с `#`.

#И это не заголовок.

###### Заголовки могут быть многострочными
(и с пропуском заголовков предыдущих уровней)

Мы все любим *выделять* текст _разными_ способами.
**Сильное выделение**, используется гораздо реже,
но __почему бы и нет__?
Немного --зачеркивания-- еще ни кому не вредило.
Код представляется элементом `code`.

Обратите внимание, как экранируются специальные
HTML-символы, такие как `&lt;`, `&gt;` и `&amp;`.

Знаете ли вы, что в Markdown, одиночные * и _
не означают выделение?
Они так же могут быть заэкранированы
при помощи обратного слэша: \*.



Лишние пустые строки должны игнорироваться.

Любите ли вы *вложеные __выделения__* так,
как __--люблю--__ их я?
            </pre></li><li>
            Выходной файл
            <pre>
&lt;h1&gt;Заголовок первого уровня&lt;/h1&gt;
&lt;h2&gt;Второго&lt;/h2&gt;
&lt;h3&gt;Третьего ## уровня&lt;/h3&gt;
&lt;h4&gt;Четвертого
# Все еще четвертого&lt;/h4&gt;
&lt;p&gt;Этот абзац текста,
содержит две строки.&lt;/p&gt;
&lt;p&gt;    # Может показаться, что это заголовок.
Но нет, это абзац начинающийся с &lt;code&gt;#&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;#И это не заголовок.&lt;/p&gt;
&lt;h6&gt;Заголовки могут быть многострочными
(и с пропуском заголовков предыдущих уровней)&lt;/h6&gt;
&lt;p&gt;Мы все любим &lt;em&gt;выделять&lt;/em&gt; текст &lt;em&gt;разными&lt;/em&gt; способами.
&lt;strong&gt;Сильное выделение&lt;/strong&gt;, используется гораздо реже,
но &lt;strong&gt;почему бы и нет&lt;/strong&gt;?
Немного &lt;s&gt;зачеркивания&lt;/s&gt; еще ни кому не вредило.
Код представляется элементом &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Обратите внимание, как экранируются специальные
HTML-символы, такие как &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Знаете ли вы, что в Markdown, одиночные * и _
не означают выделение?
Они так же могут быть заэкранированы
при помощи обратного слэша: *.&lt;/p&gt;
&lt;p&gt;Лишние пустые строки должны игнорироваться.&lt;/p&gt;
&lt;p&gt;Любите ли вы &lt;em&gt;вложеные &lt;strong&gt;выделения&lt;/strong&gt;&lt;/em&gt; так,
как &lt;strong&gt;&lt;s&gt;люблю&lt;/s&gt;&lt;/strong&gt; их я?&lt;/p&gt;
            </pre></li><li>
            Реальная разметка
<h1 id="N65653">Заголовок первого уровня</h1><h2 id="N65655">Второго</h2><h3 id="N65657">Третьего ## уровня</h3><h4 id="N65659">Четвертого
# Все еще четвертого</h4><p>Этот абзац текста,
содержит две строки.</p><p>    # Может показаться, что это заголовок.
Но нет, это абзац начинающийся с <code>#</code>.</p><p>#И это не заголовок.</p><h6>Заголовки могут быть многострочными
(и с пропуском заголовков предыдущих уровней)</h6><p>Мы все любим <em>выделять</em> текст <em>разными</em> способами.
<strong>Сильное выделение</strong>, используется гораздо реже,
но <strong>почему бы и нет</strong>?
Немного <s>зачеркивания</s> еще ни кому не вредило.
Код представляется элементом <code>code</code>.</p><p>Обратите внимание, как экранируются специальные
HTML-символы, такие как <code>&lt;</code>, <code>&gt;</code> и <code>&amp;</code>.</p><p>Знаете ли вы, что в Markdown, одиночные * и _
не означают выделение?
Они так же могут быть заэкранированы
при помощи обратного слэша: *.</p><p>Лишние пустые строки должны игнорироваться.</p><p>Любите ли вы <em>вложеные <strong>выделения</strong></em> так,
как <strong><s>люблю</s></strong> их я?</p></li></ul></li></ol><h3 id="homework-3">Домашнее задание 3. Вычисление в различных типах</h3><ol><li>
            Добавьте в программу вычисляющую выражения поддержку различных типов.
            <ul><li>
                    Первым аргументом командной строки программа должна принимать указание
                    на тип, в котором будут производится вычисления:
                    <table><tr><th>Опция</th><th>Тип</th></tr><tr><td><code>-i</code></td><td><code>int</code></td></tr><tr><td><code>-d</code></td><td><code>double</code></td></tr><tr><td><code>-bi</code></td><td><code><a href="https://web.archive.org/web/20190627153522/http://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html">BigInteger</a></code></td></tr></table></li><li>
                    Реализация не должна содержать
                    <a href="https://web.archive.org/web/20190627153522/http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.9">непроверяемых преобразований типов</a>.
                </li><li>
                    Реализация не должна использовать аннотацию
                    <code><a href="https://web.archive.org/web/20190627153522/http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.6.4.5">@SuppressWarnings</a></code>.
                </li></ul></li><li>
            При выполнении задания следует обратить внимание на легкость добавления новых типов и операциий.
        </li></ol><h3 id="homework-4">Домашнее задание 4. Функциональные выражения на JavaScript</h3><ol><li>
            Разработайте функции <code>cnst</code>, <code>variable</code>,
            <code>add</code>, <code>subtract</code>, <code>multiply</code>,
            <code>divide</code>, <code>negate</code>
            для вычисления выражений с одной переменной.
        </li><li>
            Функции должны позволять производить вычисления вида:
            <pre>
let expr = subtract(
    multiply(
        cnst(2),
        variable("x")
    ),
    cnst(3)
);
println(expr(5));
            </pre>
            При вычислении такого выражения вместо каждой переменной подставляется значение,
            переданное в качестве параметра функции <code>expr</code> (на данном этапе
            имена переменных игнорируются). Таким образом, результатом вычисления
            приведенного примера должно стать число 7.
        </li><li>
            Тестовая программа должна вычислять выражение
            <code>x<sup>2</sup>&minus;2x+1</code>, для <code>x</code> от 0 до 10.
        </li><li><b>Усложненный вариант.</b> Требуется написать функцию
            <code>parse</code>, осуществляющую разбор выражений,
            записанных в
            <a href="https://web.archive.org/web/20190627153522/http://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D0%BB%D1%8C%D1%81%D0%BA%D0%B0%D1%8F_%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C">обратной польской записи</a>.
            Например, результатом
            <pre>parse("x x 2 - * x * 1 +")(5)</pre>
            должно быть число <code>76</code>.
        </li><li>
            При выполнение задания следует обратить внимание на:
            <ul><li>
                    Применение функций высшего порядка.
                </li><li>
                    Выделение общего кода для бинарных операций.
                </li></ul></li></ol><h3 id="homework-5">Домашнее задание 5. Объектные выражения на JavaScript</h3><ol><li>
            Разработайте классы <code>Const</code>, <code>Variable</code>,
            <code>Add</code>, <code>Subtract</code>, <code>Multiply</code>,
            <code>Divide</code>, <code>Negate</code>
            для представления выражений с одной переменной.
            <ol><li>
                    Пример описания выражения <code>2x-3</code>:
                    <pre>
let expr = new Subtract(
    new Multiply(
        new Const(2),
        new Variable("x")
    ),
    new Const(3)
);
                    </pre></li><li>
                    Метод <code>evaluate(x)</code> должен производить вычисления вида:
                    При вычислении такого выражения вместо каждой переменной подставляется значение <code>x</code>,
                    переданное в качестве параметра функции <code>evaluate</code> (на данном этапе
                    имена переменных игнорируются). Таким образом, результатом вычисления
                    приведенного примера должно стать число 7.
                </li><li>
                    Метод <code>toString()</code> должен выдавать
                    запись выражения в
                    <a href="https://web.archive.org/web/20190627153522/http://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D0%BB%D1%8C%D1%81%D0%BA%D0%B0%D1%8F_%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C">обратной польской записи</a>.
                    Например, <code>expr.toString()</code> должен выдавать
                    <code>2 x * 3 -</code>.
                </li></ol></li><li><b>Усложненный вариант.</b><div>
            Метод <code>diff("x")</code> должен возвращать выражение,
            представляющее производную исходного выражения
            по переменной <code>x</code>.
            Например, <code>expr.diff("x")</code> должен возвращать
            выражение, эквивалентное <code>new Const(2)</code>
            (выражения
                <code>new Subtract(new Const(2), new Const(0))</code> и
                <pre>
new Subtract(
    new Add(
        new Multiply(new Const(0), new Variable("x")),
        new Multiply(new Const(2), new Const(1))
    )
    new Const(0)
)
                 </pre>
                 так же будут считаться правильным ответом).
            </div><p>
                Функция <code>parse</code> должна выдавать разобранное
                объектное выражение.
            </p></li><li><b>Бонусный вариант.</b>
            Требуется написать
            метод <code>simplify()</code>, производящий вычисления
            константных выражений. Например,
            <pre>parse("x x 2 - * 1 *").diff("x").simplify().toString()</pre>
            должно возвращать &laquo;<code>x x 2 - +</code>&raquo;.
        </li><li>
            При выполнение задания следует обратить внимание на:
            <ul><li>
                    Применение инкапсуляции.
                </li><li>
                    Выделение общего кода для операций.
                </li></ul></li></ol><h3 id="homework-6">Домашнее задание 6. Обработка ошибок на JavaScript</h3><ol><li>
            Добавьте в предыдущее домашнее задание функцию
            <code>parsePrefix(string)</code>, разбирающую выражения,
            задаваемые записью вида <code>(- (* 2 x) 3)</code>.
            Если разбираемое выражение некорректно, метод
            <code>parsePrefix</code> должен бросать
            человеко-читаемое сообщение об ошибке.
        </li><li>
            Добавьте в предыдущее домашнее задание метод
            <code>prefix()</code>, выдающий выражение в формате,
            ожидаемом функцией <code>parsePrefix</code>.
        </li><li>
            При выполнение задания следует обратить внимание на:
            <ul><li>
                    Применение инкапсуляции.
                </li><li>
                    Выделение общего кода для бинарных операций.
                </li><li>
                    Обработку ошибок.
                </li><li>
                    Минимизацию необходимой памяти.
                </li></ul></li></ol><h3 id="homework-7">Домашнее задание 7. Линейная алгебра на Clojure</h3><ol><li>
            Разработайте функции для работы с объектами линейной алгебры,
            которые представляются следующим образом:
            <ul><li>скаляры &ndash; числа</li><li>векторы &ndash; векторы чисел;</li><li>матрицы &ndash; векторы векторов чисел.</li></ul></li><li>
            Функции над векторами:
            <ul><li><code>v+</code>/<code>v-</code>/<code>v*</code>
                    &ndash; покоординатное сложение/вычитание/умножение;
                </li><li><code>scalar</code>/<code>vect</code>
                    &ndash; скалярное/векторное произведение;
                </li><li><code>v*s</code>
                    &ndash; умножение на скаляр.
                </li></ul></li><li>
            Функции над матрицами:
            <ul><li><code>m+</code>/<code>m-</code>/<code>m*</code>
                    &ndash; поэлементное сложение/вычитание/умножение;
                </li><li><code>m*s</code> &ndash; умножение на скаляр;
                </li><li><code>m*v</code> &ndash; умножение на вектор;
                </li><li><code>m*m</code> &ndash; матричное умножение;
                </li><li><code>transpose</code> &ndash; траспонирование;
                </li></ul></li><li><b>Усложненный вариант.</b><ol><li>
                    Ко всем функциям должны быть указаны контракты.
                    Например, нельзя складывать вектора разной длины.
                </li><li>
                    Все функции должны поддерживать произвольное число аргументов.
                    Например
                    <code>(v+ [1 2] [3 4] [5 6])</code> должно быть равно
                    <code>[9 12]</code>.
                </li></ol></li><li>
            При выполнение задания следует обратить внимание на:
            <ul><li>
                    Применение функций высшего порядка.
                </li><li>
                    Выделение общего кода для операций.
                </li></ul></li></ol><h3 id="homework-8">Домашнее задание 8. Функциональные выражения на Clojure</h3><ol><li>
            Разработайте функции
            <code>constant</code>,
            <code>variable</code>,
            <code>add</code>,
            <code>subtract</code>,
            <code>multiply</code> и
            <code>divide</code>
            для представления арифметических выражений.
            <ol><li>
                    Пример описания выражения <code>2x-3</code>:
                    <pre>
(def expr
  (subtract
    (multiply
      (constant 2)
      (variable "x"))
    (constant 3)))
                    </pre></li><li>
                    Выражение должно быть функцией, возвращающей
                    значение выражение при подстановке элементов,
                    заданных отображением.
                    Например, <code>(expr {"x" 2})</code> должно быть равно 1.
                </li></ol></li><li>
            Разработайте разборщик выражений, читающий
            выражения в стандартной для Clojure форме.
            Например, <pre>(parseFunction "(- (* 2 x) 3)")</pre>
            должно быть эквивалентно <code>expr</code>.
        </li><li><b>Усложненный вариант.</b>
            Функции <code>add</code>, <code>subtract</code>,
            <code>multiply</code> и <code>divide</code>
            должны принимать произвольное число аргументов.
            Разборщик так же должен допускать произвольное число
            аргументов для <code>+</code>, <code>-</code>, <code>*</code>.
        </li><li>
            При выполнение задания следует обратить внимание на:
            <ul><li>
                    Выделение общего кода для операций.
                </li></ul></li></ol><h3 id="homework-9">Домашнее задание 9. Объектные выражения на Clojure</h3><ol><li>
            Разработайте конструкторы
            <code>Constant</code>,
            <code>Variable</code>,
            <code>Add</code>,
            <code>Subtract</code>,
            <code>Multiply</code> и
            <code>Divide</code>
            для представления выражений с одной переменной.
            <ol><li>
                    Пример описания выражения <code>2x-3</code>:
                    <pre>
(def expr
  (Subtract
    (Multiply
      (Constant 2)
      (Variable "x"))
    (Const 3)))
                    </pre></li><li>
                    Функция <code>(evaluate expression vars)</code>
                    должна производить вычисление выражения
                    <code>expression</code> для значений
                    переменных, заданных отображением <code>vars</code>.
                    Например, <code>(evaluate expr {"x" 2})</code>
                    должно быть равно 1.
                </li><li>
                    Функция <code>(toString expression)</code>
                    должна выдавать запись выражения в
                    стандартной для Clojure форме.
                </li><li>
                    Функция <code>(parseObject "expression")</code>
                    должна разбирать выражения, записанные
                    в стандартной для Clojure форме.
                    Например, <pre>(parseObject "(- (* 2 x) 3)")</pre>
                    должно быть эквивалентно <code>expr</code>.
                </li><li>
                    Функция <code>(diff expression "variable")</code>
                    должена возвращать выражение,
                    представляющее производную исходного выражения
                    по заданой пермененной.
                    Например, <code>(diff expression "x")</code>
                    должен возвращать выражение, эквивалентное
                    <code>(Constant 2)</code>, при этом
                    выражения
                    <code>(Subtract (Const 2) (Const 0))</code> и
                    <pre>
(Subtract
  (Add
    (Multiply (Const 0) (Variable "x"))
    (Multiply (Const 2) (Const 1)))
  (Const 0))
                    </pre>
                    так же будут считаться правильным ответом.
                </li></ol></li><li><b>Усложненный вариант.</b>
            Констуркторы <code>Add</code>, <code>Subtract</code>,
            <code>Multiply</code> и <code>Divide</code>
            должны принимать произвольное число аргументов.
            Разборщик так же должен допускать произвольное число
            аргументов для <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>.
        </li><li>
            При выполнение задания можно использовать
            любой способ преставления объектов.
        </li></ol><h3 id="homework-10">Домашнее задание 10. Комбинаторные парсеры</h3><ol><li><b>Простой вариант.</b>
            Реализуйте функцию <code>(parseObjectSuffix "expression")</code>,
            разбирающую выражения, записанные в суффиксной форме,
            и функцию <code>toStringSuffix</code>,
            возвращающую строковое представление выражения в этой форме.
            Например, <pre>(toStringSuffix (parseObjectSuffix "( ( 2 x * ) 3 - )"))</pre>
            должно возвращать <code>((2 x *) 3 -)</code>.
        </li><li><b>Сложный вариант.</b>
            Реализуйте функцию <code>(parseObjectInfix "expression")</code>,
            разбирающую выражения, записанные в инфиксной форме,
            и функцию <code>toStringInfix</code>,
            возвращающую строковое представление выражения в этой форме.
            Например, <pre>(toStringInfix (parseObjectInfix "2 * x - 3"))</pre>
            должно возвращать <code>((2 * x) - 3)</code>.
        </li><li><b>Бонусный вариант.</b>
            Добавьте в библиотеку комбинаторов возможность обработки ошибок
            и продемонстрируйте ее использование в вашем парсере.
        </li><li>
            Функции разбора должны базироваться на библиотеке
            комбинаторов, разработанной на лекции.
        </li></ol><h3 id="homework-11">Домашнее задание 11. Ассоциативные массивы на Prolog</h3><ol><li>
            Реализуйте ассоциативный массив (map).
        </li><li><p><b>Простой вариант.</b>
                Ассоциативный массив на упорядоченном списке пар ключ-значение.
            </p><p>
                Разработайте правила:
                <ul><li><code>map_get(ListMap, Key, Value)</code>,
                        проверяющее, что дерево содержит заданную
                        пару ключ-значение.
                    </li><li><code>map_put(ListMap, Key, Value, Result)</code>,
                        добавляющее пару ключ-значение в дерево,
                        или заменяющее текущее значение для ключа;
                    </li><li><code>map_remove(ListMap, Key, Result)</code>,
                        удаляющее отображение для ключа.
                    </li></ul></p><p>
                Правила не должны анализировать хвост списка,
                если в нем точно нет необходимого ключа.
            </p></li><li><p><b>Сложный вариант.</b>
                Ассоциативный массив на двоичном дереве.
            </p><p>
                Разработайте правила:
                <ul><li><code>tree_build(ListMap, TreeMap)</code>,
                        строящее дерево из упорядоченного набора пар
                        ключ-значение;
                    </li><li><code>map_get(TreeMap, Key, Value)</code>.
                    </li></ul></p><p>
                Для решения можно реализовать любое дерево поиска логарифмической высоты.
            </p></li><li><p><b>Бонусный вариант.</b>
                Дополнительно разработайте правила:
            </p><ul><li><code>map_put(TreeMap, Key, Value, Result)</code>;
                </li><li><code>map_remove(TreeMap, Key, Result)</code>.
                </li></ul></li></ol></td><td id="sidebar"><div id="sidebar-head"><form method="get" action="https://web.archive.org/web/20190627153522/https://www.google.com/search"><p><input type="hidden" name="sitesearch" value="kgeorgiy.info"></p><table><tr><td style="width:100%"><input style="width:100%" type="text" name="q" maxlength="255"></td><td><button type="submit" value="Search"><img alt="Search" src="/web/20190627153522im_/http://www.kgeorgiy.info/design/find.png" width="16" height="16"></button></td></tr></table></form></div><div id="sidebar-body"><h3><a href="#homework-1">Домашнее задание 1. Обработка ошибок</a></h3><h3><a href="#homework-2">Домашнее задание 2. Markdown to HTML</a></h3><h1><a href="#N65653">Заголовок первого уровня</a></h1><h2><a href="#N65655">Второго</a></h2><h3><a href="#N65657">Третьего ## уровня</a></h3><h4><a href="#N65659">Четвертого
# Все еще четвертого</a></h4><h3><a href="#homework-3">Домашнее задание 3. Вычисление в различных типах</a></h3><h3><a href="#homework-4">Домашнее задание 4. Функциональные выражения на JavaScript</a></h3><h3><a href="#homework-5">Домашнее задание 5. Объектные выражения на JavaScript</a></h3><h3><a href="#homework-6">Домашнее задание 6. Обработка ошибок на JavaScript</a></h3><h3><a href="#homework-7">Домашнее задание 7. Линейная алгебра на Clojure</a></h3><h3><a href="#homework-8">Домашнее задание 8. Функциональные выражения на Clojure</a></h3><h3><a href="#homework-9">Домашнее задание 9. Объектные выражения на Clojure</a></h3><h3><a href="#homework-10">Домашнее задание 10. Комбинаторные парсеры</a></h3><h3><a href="#homework-11">Домашнее задание 11. Ассоциативные массивы на Prolog</a></h3></div><div id="sidebar-foot"><a href="https://web.archive.org/web/20190627153522/https://validator.w3.org/check?uri=referer"><img src="https://web.archive.org/web/20190627153522im_/https://www.w3.org/Icons/valid-html401" alt="Valid HTML 4.01 Strict" height="31" width="88"></a></div></td></tr></table><script type="text/javascript">
                (function (d, w, c) {
                    (w[c] = w[c] || []).push(function() {
                        try {
                            w.yaCounter19426939 = new Ya.Metrika({
                                id:19426939,
                                clickmap:true,
                                trackLinks:true,
                                accurateTrackBounce:true,
                                webvisor:true
                            });
                        } catch(e) { }
                    });

                    var n = d.getElementsByTagName("script")[0],
                        s = d.createElement("script"),
                        f = function () { n.parentNode.insertBefore(s, n); };
                    s.type = "text/javascript";
                    s.async = true;
                    s.src = "https://web.archive.org/web/20190627153522/https://mc.yandex.ru/metrika/watch.js";

                    if (w.opera == "[object Opera]") {
                        d.addEventListener("DOMContentLoaded", f, false);
                    } else { f(); }
                })(document, window, "yandex_metrika_callbacks");
                </script><noscript><div><img src="https://web.archive.org/web/20190627153522im_/https://mc.yandex.ru/watch/19426939" style="position:absolute; left:-9999px;" alt=""></div></noscript></body></html><!--
     FILE ARCHIVED ON 15:35:22 Jun 27, 2019 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 21:11:56 Apr 05, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 0.56
  exclusion.robots: 0.147
  exclusion.robots.policy: 0.138
  cdx.remote: 0.053
  esindex: 0.008
  LoadShardBlock: 133.862 (3)
  PetaboxLoader3.datanode: 120.796 (4)
  PetaboxLoader3.resolve: 59.723 (2)
  load_resource: 81.169
-->